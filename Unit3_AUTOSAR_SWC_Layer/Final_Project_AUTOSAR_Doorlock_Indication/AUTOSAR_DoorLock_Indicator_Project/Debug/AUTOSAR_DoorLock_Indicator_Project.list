
AUTOSAR_DoorLock_Indicator_Project.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007d8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000908  08000908  00010908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000910  08000910  00010918  2**0
                  CONTENTS
  4 .ARM          00000000  08000910  08000910  00010918  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000910  08000918  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000910  08000910  00010910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08000918  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000918  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010918  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003107  00000000  00000000  00010941  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c99  00000000  00000000  00013a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000f74  00000000  00000000  000146e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002b8  00000000  00000000  00015658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000210  00000000  00000000  00015910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002df4  00000000  00000000  00015b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00003498  00000000  00000000  00018914  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000c54e  00000000  00000000  0001bdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000282fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000080c  00000000  00000000  00028378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080008f0 	.word	0x080008f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080008f0 	.word	0x080008f0

08000170 <DoorLockAlgo_Runnable>:
/*****************************************************
 * Runnable: 	DoorLockAlgo
 * Period:		0.012
 *****************************************************/
void DoorLockAlgo_Runnable(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	uint8 DoorState = 0;
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]

	//Read DoorState from RTE SR interface
	DoorState = Rte_IRead_DoorLockAlgoSW_DoorLockAlgo_Rport_SR_DoorState_DoorState();
 800017a:	f000 f83f 	bl	80001fc <Rte_IRead_DoorLockAlgoSW_DoorLockAlgo_Rport_SR_DoorState_DoorState>
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]

	if (DoorState)
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d003      	beq.n	8000190 <DoorLockAlgo_Runnable+0x20>
	{
		//Door is opened
		Rte_Call_Rport_CS_LedSwitch_LED_Switch(LedOn);
 8000188:	2000      	movs	r0, #0
 800018a:	f000 f843 	bl	8000214 <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch>
	{
		Rte_Call_Rport_CS_LedSwitch_LED_Switch(LedOff);
	}


}
 800018e:	e002      	b.n	8000196 <DoorLockAlgo_Runnable+0x26>
		Rte_Call_Rport_CS_LedSwitch_LED_Switch(LedOff);
 8000190:	2001      	movs	r0, #1
 8000192:	f000 f83f 	bl	8000214 <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch>
}
 8000196:	bf00      	nop
 8000198:	3708      	adds	r7, #8
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}

0800019e <LedSwitch_Runnable>:
 * Port: 		Pport_CS_LedSwitch
 * Interface:	IF_CS_LedSwitch
 * Operation:	LED_Switch
 *****************************************************/
Std_ReturnType LedSwitch_Runnable(uint8 LED_State)
{
 800019e:	b580      	push	{r7, lr}
 80001a0:	b082      	sub	sp, #8
 80001a2:	af00      	add	r7, sp, #0
 80001a4:	4603      	mov	r3, r0
 80001a6:	71fb      	strb	r3, [r7, #7]
	if (LED_State == LedOn)
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d105      	bne.n	80001ba <LedSwitch_Runnable+0x1c>
	{
		Dio_writeChannel(GPIO_PIN_7, LedOn);
 80001ae:	2100      	movs	r1, #0
 80001b0:	2080      	movs	r0, #128	; 0x80
 80001b2:	f000 f871 	bl	8000298 <Dio_writeChannel>

		return RTE_E_IF_CS_LedSwitch_E_Ok;
 80001b6:	2300      	movs	r3, #0
 80001b8:	e009      	b.n	80001ce <LedSwitch_Runnable+0x30>

	} else if ( LED_State == LedOff)
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	2b01      	cmp	r3, #1
 80001be:	d105      	bne.n	80001cc <LedSwitch_Runnable+0x2e>
	{
		Dio_writeChannel(GPIO_PIN_7, LedOff);
 80001c0:	2101      	movs	r1, #1
 80001c2:	2080      	movs	r0, #128	; 0x80
 80001c4:	f000 f868 	bl	8000298 <Dio_writeChannel>

		return RTE_E_IF_CS_LedSwitch_E_Not_Ok;
 80001c8:	2301      	movs	r3, #1
 80001ca:	e000      	b.n	80001ce <LedSwitch_Runnable+0x30>

	} else
	{
		return RTE_E_IF_CS_LedSwitch_E_Not_Ok;
 80001cc:	2301      	movs	r3, #1
	}

}
 80001ce:	4618      	mov	r0, r3
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}

080001d6 <ReadDoorSensor_Runnable>:
 /*****************************************************
  * Runnable: 	ReadDoorSensor
  * Period:		0.01
  *****************************************************/
void ReadDoorSensor_Runnable(void)
{
 80001d6:	b580      	push	{r7, lr}
 80001d8:	b082      	sub	sp, #8
 80001da:	af00      	add	r7, sp, #0
	uint8 DoorState = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	71fb      	strb	r3, [r7, #7]

	//Read GPIO Pin 3
	DoorState = Dio_ReadChannel(DIO_door_ID);
 80001e0:	2008      	movs	r0, #8
 80001e2:	f000 f847 	bl	8000274 <Dio_ReadChannel>
 80001e6:	4603      	mov	r3, r0
 80001e8:	71fb      	strb	r3, [r7, #7]

	//Write DoorState to RTE SR interface
	Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_Pport_SR_DoorState_DoorState(DoorState);
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f831 	bl	8000254 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_Pport_SR_DoorState_DoorState>

}
 80001f2:	bf00      	nop
 80001f4:	3708      	adds	r7, #8
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
	...

080001fc <Rte_IRead_DoorLockAlgoSW_DoorLockAlgo_Rport_SR_DoorState_DoorState>:
Std_ReturnType DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch_Buffer_retcode = RTE_E_OK;

FunctionPtr_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch_Delegate = 0;

uint8 Rte_IRead_DoorLockAlgoSW_DoorLockAlgo_Rport_SR_DoorState_DoorState (void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	return (Rte_Inst_DoorLockAlgoSW)->DoorLockAlgo_Rport_SR_DoorState_DoorState->value;
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <Rte_IRead_DoorLockAlgoSW_DoorLockAlgo_Rport_SR_DoorState_DoorState+0x14>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	781b      	ldrb	r3, [r3, #0]
}
 8000206:	4618      	mov	r0, r3
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	08000908 	.word	0x08000908

08000214 <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch>:
Std_ReturnType Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch (uint8 LED_State)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
	Std_ReturnType __result = DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch_Buffer_retcode;
 800021e:	4b0b      	ldr	r3, [pc, #44]	; (800024c <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch+0x38>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	73fb      	strb	r3, [r7, #15]
	if ( Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch_Delegate != 0 ) {
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch+0x3c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d006      	beq.n	800023a <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch+0x26>
		__result = Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch_Delegate(LED_State);
 800022c:	4b08      	ldr	r3, [pc, #32]	; (8000250 <Rte_Call_DoorLockAlgoSW_Rport_CS_LedSwitch_LED_Switch+0x3c>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	79fa      	ldrb	r2, [r7, #7]
 8000232:	4610      	mov	r0, r2
 8000234:	4798      	blx	r3
 8000236:	4603      	mov	r3, r0
 8000238:	73fb      	strb	r3, [r7, #15]
	}
	LedSwitch_Runnable(LED_State);
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ffae 	bl	800019e <LedSwitch_Runnable>

	return __result;
 8000242:	7bfb      	ldrb	r3, [r7, #15]
}
 8000244:	4618      	mov	r0, r3
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000001c 	.word	0x2000001c
 8000250:	20000020 	.word	0x20000020

08000254 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_Pport_SR_DoorState_DoorState>:




void Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_Pport_SR_DoorState_DoorState (uint8 DoorState)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	(Rte_Inst_DoorSensorAbstractionSWC)->ReadDoorSensor_Pport_SR_DoorState_DoorState->value = DoorState;
 800025e:	4b04      	ldr	r3, [pc, #16]	; (8000270 <Rte_IWrite_DoorSensorAbstractionSWC_ReadDoorSensor_Pport_SR_DoorState_DoorState+0x1c>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	79fa      	ldrb	r2, [r7, #7]
 8000264:	701a      	strb	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	0800090c 	.word	0x0800090c

08000274 <Dio_ReadChannel>:

//--------------<Include>
#include "DIO.h"

unsigned char Dio_ReadChannel  (unsigned char ID)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
	return ( MCAL_GPIO_ReadPin(GPIO_Port_Used, ID) );
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	b29b      	uxth	r3, r3
 8000282:	4619      	mov	r1, r3
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <Dio_ReadChannel+0x20>)
 8000286:	f000 fa0b 	bl	80006a0 <MCAL_GPIO_ReadPin>
 800028a:	4603      	mov	r3, r0
}
 800028c:	4618      	mov	r0, r3
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010800 	.word	0x40010800

08000298 <Dio_writeChannel>:

void Dio_writeChannel (unsigned char ID, unsigned char Level)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	4613      	mov	r3, r2
 80002a6:	71bb      	strb	r3, [r7, #6]
	return ( MCAL_GPIO_WritePin(GPIO_Port_Used, Level, ID) );
 80002a8:	79bb      	ldrb	r3, [r7, #6]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	79fa      	ldrb	r2, [r7, #7]
 80002ae:	b292      	uxth	r2, r2
 80002b0:	4619      	mov	r1, r3
 80002b2:	4803      	ldr	r0, [pc, #12]	; (80002c0 <Dio_writeChannel+0x28>)
 80002b4:	f000 fa08 	bl	80006c8 <MCAL_GPIO_WritePin>

}
 80002b8:	3708      	adds	r7, #8
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	40010800 	.word	0x40010800

080002c4 <EXTI0_IRQHandler>:
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*
//             Interrupt Handler
//*=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=**=*=*=*=*=*=*=*=*

void EXTI0_IRQHandler(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<0);
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002ca:	695b      	ldr	r3, [r3, #20]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <EXTI0_IRQHandler+0x1c>)
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[0]();
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <EXTI0_IRQHandler+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4798      	blx	r3

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40010400 	.word	0x40010400
 80002e4:	20000030 	.word	0x20000030

080002e8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<1);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI1_IRQHandler+0x1c>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI1_IRQHandler+0x1c>)
 80002f2:	f043 0302 	orr.w	r3, r3, #2
 80002f6:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[1]();
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <EXTI1_IRQHandler+0x20>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4798      	blx	r3
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400
 8000308:	20000030 	.word	0x20000030

0800030c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<2);
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <EXTI2_IRQHandler+0x1c>)
 8000312:	695b      	ldr	r3, [r3, #20]
 8000314:	4a04      	ldr	r2, [pc, #16]	; (8000328 <EXTI2_IRQHandler+0x1c>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[2]();
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <EXTI2_IRQHandler+0x20>)
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	4798      	blx	r3
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010400 	.word	0x40010400
 800032c:	20000030 	.word	0x20000030

08000330 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	//Clearing PR register
	EXTI->PR |= (1<<3);
 8000334:	4b05      	ldr	r3, [pc, #20]	; (800034c <EXTI3_IRQHandler+0x1c>)
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	4a04      	ldr	r2, [pc, #16]	; (800034c <EXTI3_IRQHandler+0x1c>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[3]();
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI3_IRQHandler+0x20>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4798      	blx	r3

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40010400 	.word	0x40010400
 8000350:	20000030 	.word	0x20000030

08000354 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0

	//Clearing PR register
	EXTI->PR |= (1<<4);
 8000358:	4b05      	ldr	r3, [pc, #20]	; (8000370 <EXTI4_IRQHandler+0x1c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <EXTI4_IRQHandler+0x1c>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6153      	str	r3, [r2, #20]
	//Calling function
	GP_IRQ_CallBack[4]();
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <EXTI4_IRQHandler+0x20>)
 8000366:	691b      	ldr	r3, [r3, #16]
 8000368:	4798      	blx	r3
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	20000030 	.word	0x20000030

08000378 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5) {EXTI->PR |= (1<<5) ; GP_IRQ_CallBack[5]();}
 800037c:	4b26      	ldr	r3, [pc, #152]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	2b00      	cmp	r3, #0
 8000386:	d008      	beq.n	800039a <EXTI9_5_IRQHandler+0x22>
 8000388:	4b23      	ldr	r3, [pc, #140]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a22      	ldr	r2, [pc, #136]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6153      	str	r3, [r2, #20]
 8000394:	4b21      	ldr	r3, [pc, #132]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 8000396:	695b      	ldr	r3, [r3, #20]
 8000398:	4798      	blx	r3
	if(EXTI->PR & 1<<6) {EXTI->PR |= (1<<6) ; GP_IRQ_CallBack[6]();}
 800039a:	4b1f      	ldr	r3, [pc, #124]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 800039c:	695b      	ldr	r3, [r3, #20]
 800039e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d008      	beq.n	80003b8 <EXTI9_5_IRQHandler+0x40>
 80003a6:	4b1c      	ldr	r3, [pc, #112]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003b0:	6153      	str	r3, [r2, #20]
 80003b2:	4b1a      	ldr	r3, [pc, #104]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4798      	blx	r3
	if(EXTI->PR & 1<<7) {EXTI->PR |= (1<<7) ; GP_IRQ_CallBack[7]();}
 80003b8:	4b17      	ldr	r3, [pc, #92]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d008      	beq.n	80003d6 <EXTI9_5_IRQHandler+0x5e>
 80003c4:	4b14      	ldr	r3, [pc, #80]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a13      	ldr	r2, [pc, #76]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ce:	6153      	str	r3, [r2, #20]
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	4798      	blx	r3
	if(EXTI->PR & 1<<8) {EXTI->PR |= (1<<8) ; GP_IRQ_CallBack[8]();}
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <EXTI9_5_IRQHandler+0x7c>
 80003e2:	4b0d      	ldr	r3, [pc, #52]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 80003f0:	6a1b      	ldr	r3, [r3, #32]
 80003f2:	4798      	blx	r3
	if(EXTI->PR & 1<<9) {EXTI->PR |= (1<<9) ; GP_IRQ_CallBack[9]();}
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 80003f6:	695b      	ldr	r3, [r3, #20]
 80003f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <EXTI9_5_IRQHandler+0x9a>
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI9_5_IRQHandler+0xa0>)
 8000406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040a:	6153      	str	r3, [r2, #20]
 800040c:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI9_5_IRQHandler+0xa4>)
 800040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000410:	4798      	blx	r3
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010400 	.word	0x40010400
 800041c:	20000030 	.word	0x20000030

08000420 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10) {EXTI->PR |= (1<<10) ; GP_IRQ_CallBack[10]();}
 8000424:	4b2d      	ldr	r3, [pc, #180]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800042c:	2b00      	cmp	r3, #0
 800042e:	d008      	beq.n	8000442 <EXTI15_10_IRQHandler+0x22>
 8000430:	4b2a      	ldr	r3, [pc, #168]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800043a:	6153      	str	r3, [r2, #20]
 800043c:	4b28      	ldr	r3, [pc, #160]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800043e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000440:	4798      	blx	r3
	if(EXTI->PR & 1<<11) {EXTI->PR |= (1<<11) ; GP_IRQ_CallBack[11]();}
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800044a:	2b00      	cmp	r3, #0
 800044c:	d008      	beq.n	8000460 <EXTI15_10_IRQHandler+0x40>
 800044e:	4b23      	ldr	r3, [pc, #140]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	4a22      	ldr	r2, [pc, #136]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000458:	6153      	str	r3, [r2, #20]
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800045c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800045e:	4798      	blx	r3
	if(EXTI->PR & 1<<12) {EXTI->PR |= (1<<12) ; GP_IRQ_CallBack[12]();}
 8000460:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000462:	695b      	ldr	r3, [r3, #20]
 8000464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000468:	2b00      	cmp	r3, #0
 800046a:	d008      	beq.n	800047e <EXTI15_10_IRQHandler+0x5e>
 800046c:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	4a1a      	ldr	r2, [pc, #104]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000472:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000476:	6153      	str	r3, [r2, #20]
 8000478:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4798      	blx	r3
	if(EXTI->PR & 1<<13) {EXTI->PR |= (1<<13) ; GP_IRQ_CallBack[13]();}
 800047e:	4b17      	ldr	r3, [pc, #92]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000486:	2b00      	cmp	r3, #0
 8000488:	d008      	beq.n	800049c <EXTI15_10_IRQHandler+0x7c>
 800048a:	4b14      	ldr	r3, [pc, #80]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a13      	ldr	r2, [pc, #76]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 8000490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 8000498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049a:	4798      	blx	r3
	if(EXTI->PR & 1<<14) {EXTI->PR |= (1<<14) ; GP_IRQ_CallBack[14]();}
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 800049e:	695b      	ldr	r3, [r3, #20]
 80004a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d008      	beq.n	80004ba <EXTI15_10_IRQHandler+0x9a>
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b2:	6153      	str	r3, [r2, #20]
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 80004b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004b8:	4798      	blx	r3
	if(EXTI->PR & 1<<15) {EXTI->PR |= (1<<15) ; GP_IRQ_CallBack[15]();}
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d008      	beq.n	80004d8 <EXTI15_10_IRQHandler+0xb8>
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a04      	ldr	r2, [pc, #16]	; (80004dc <EXTI15_10_IRQHandler+0xbc>)
 80004cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b03      	ldr	r3, [pc, #12]	; (80004e0 <EXTI15_10_IRQHandler+0xc0>)
 80004d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004d6:	4798      	blx	r3

}
 80004d8:	bf00      	nop
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40010400 	.word	0x40010400
 80004e0:	20000030 	.word	0x20000030

080004e4 <Get_Pin_Bit_Position>:
	GPIOX->ODR |= (uint32_t)(Portx_Val);
}


uint8_t Get_Pin_Bit_Position(uint16_t PinNumber)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	4603      	mov	r3, r0
 80004ec:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 80004ee:	88fb      	ldrh	r3, [r7, #6]
 80004f0:	2b08      	cmp	r3, #8
 80004f2:	d01a      	beq.n	800052a <Get_Pin_Bit_Position+0x46>
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	dc06      	bgt.n	8000506 <Get_Pin_Bit_Position+0x22>
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d012      	beq.n	8000522 <Get_Pin_Bit_Position+0x3e>
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	d012      	beq.n	8000526 <Get_Pin_Bit_Position+0x42>
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00c      	beq.n	800051e <Get_Pin_Bit_Position+0x3a>
 8000504:	e01b      	b.n	800053e <Get_Pin_Bit_Position+0x5a>
 8000506:	2b20      	cmp	r3, #32
 8000508:	d013      	beq.n	8000532 <Get_Pin_Bit_Position+0x4e>
 800050a:	2b20      	cmp	r3, #32
 800050c:	dc02      	bgt.n	8000514 <Get_Pin_Bit_Position+0x30>
 800050e:	2b10      	cmp	r3, #16
 8000510:	d00d      	beq.n	800052e <Get_Pin_Bit_Position+0x4a>
 8000512:	e014      	b.n	800053e <Get_Pin_Bit_Position+0x5a>
 8000514:	2b40      	cmp	r3, #64	; 0x40
 8000516:	d00e      	beq.n	8000536 <Get_Pin_Bit_Position+0x52>
 8000518:	2b80      	cmp	r3, #128	; 0x80
 800051a:	d00e      	beq.n	800053a <Get_Pin_Bit_Position+0x56>
 800051c:	e00f      	b.n	800053e <Get_Pin_Bit_Position+0x5a>
	{
	case GPIO_PIN_0:
		return 0;
 800051e:	2300      	movs	r3, #0
 8000520:	e040      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_1:
		return 4;
 8000522:	2304      	movs	r3, #4
 8000524:	e03e      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_2:
		return 8;
 8000526:	2308      	movs	r3, #8
 8000528:	e03c      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_3:
		return 12;
 800052a:	230c      	movs	r3, #12
 800052c:	e03a      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_4:
		return 16;
 800052e:	2310      	movs	r3, #16
 8000530:	e038      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_5:
		return 20;
 8000532:	2314      	movs	r3, #20
 8000534:	e036      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_6:
		return 24;
 8000536:	2318      	movs	r3, #24
 8000538:	e034      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_7:
		return 28;
 800053a:	231c      	movs	r3, #28
 800053c:	e032      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	}
	switch (PinNumber)
 800053e:	88fb      	ldrh	r3, [r7, #6]
 8000540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000544:	d023      	beq.n	800058e <Get_Pin_Bit_Position+0xaa>
 8000546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800054a:	dc09      	bgt.n	8000560 <Get_Pin_Bit_Position+0x7c>
 800054c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000550:	d019      	beq.n	8000586 <Get_Pin_Bit_Position+0xa2>
 8000552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000556:	d018      	beq.n	800058a <Get_Pin_Bit_Position+0xa6>
 8000558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800055c:	d011      	beq.n	8000582 <Get_Pin_Bit_Position+0x9e>
 800055e:	e020      	b.n	80005a2 <Get_Pin_Bit_Position+0xbe>
 8000560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000564:	d017      	beq.n	8000596 <Get_Pin_Bit_Position+0xb2>
 8000566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800056a:	dc03      	bgt.n	8000574 <Get_Pin_Bit_Position+0x90>
 800056c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000570:	d00f      	beq.n	8000592 <Get_Pin_Bit_Position+0xae>
 8000572:	e016      	b.n	80005a2 <Get_Pin_Bit_Position+0xbe>
 8000574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000578:	d00f      	beq.n	800059a <Get_Pin_Bit_Position+0xb6>
 800057a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800057e:	d00e      	beq.n	800059e <Get_Pin_Bit_Position+0xba>
 8000580:	e00f      	b.n	80005a2 <Get_Pin_Bit_Position+0xbe>
	{
	case GPIO_PIN_8:
		return 0;
 8000582:	2300      	movs	r3, #0
 8000584:	e00e      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_9:
		return 4;
 8000586:	2304      	movs	r3, #4
 8000588:	e00c      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_10:
		return 8;
 800058a:	2308      	movs	r3, #8
 800058c:	e00a      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_11:
		return 12;
 800058e:	230c      	movs	r3, #12
 8000590:	e008      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_12:
		return 16;
 8000592:	2310      	movs	r3, #16
 8000594:	e006      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_13:
		return 20;
 8000596:	2314      	movs	r3, #20
 8000598:	e004      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_14:
		return 24;
 800059a:	2318      	movs	r3, #24
 800059c:	e002      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	case GPIO_PIN_15:
		return 28;
 800059e:	231c      	movs	r3, #28
 80005a0:	e000      	b.n	80005a4 <Get_Pin_Bit_Position+0xc0>
	}
	return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <MCAL_GPIO_INIT>:
 * @param [in] 		-pointer to structure that  include pin config
 * @retval 			-None
 * Note             -None
 */
void MCAL_GPIO_INIT(GPIO_t* GPIOX, GPIO_Config_t* PinConfig )
{
 80005ae:	b590      	push	{r4, r7, lr}
 80005b0:	b085      	sub	sp, #20
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
 80005b6:	6039      	str	r1, [r7, #0]
	//Port Configuration register low (GPIOx_CRL) Configure PINS From 0 --> 7
	//Port Configuration register High (GPIOx_CRH) Configure PINS From 8 --> 15
	volatile uint32_t* RegisterConfig = (void*)0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
	uint8_t Config = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
	//Pin is is in Register CRL or CRH
	RegisterConfig = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOX->CRL : &GPIOX->CRH;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d801      	bhi.n	80005cc <MCAL_GPIO_INIT+0x1e>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	e001      	b.n	80005d0 <MCAL_GPIO_INIT+0x22>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]

	//Clear CNFX[1:0] MODEX[1:0]
	*RegisterConfig &= ~(0xf << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber));
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff ff84 	bl	80004e4 <Get_Pin_Bit_Position>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	230f      	movs	r3, #15
 80005e2:	4093      	lsls	r3, r2
 80005e4:	43da      	mvns	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	401a      	ands	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	601a      	str	r2, [r3, #0]

	//Is pin output
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d00b      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	789b      	ldrb	r3, [r3, #2]
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d007      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	789b      	ldrb	r3, [r3, #2]
	if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP ||
 8000604:	2b05      	cmp	r3, #5
 8000606:	d003      	beq.n	8000610 <MCAL_GPIO_INIT+0x62>
	      PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	789b      	ldrb	r3, [r3, #2]
 800060c:	2b04      	cmp	r3, #4
 800060e:	d10b      	bne.n	8000628 <MCAL_GPIO_INIT+0x7a>
	{
		//Set CNFX[1:0] MODEX[1:0]
		Config = ( ((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_Output_SPEED) );
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	3b04      	subs	r3, #4
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	b25a      	sxtb	r2, r3
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	b25b      	sxtb	r3, r3
 8000620:	4313      	orrs	r3, r2
 8000622:	b25b      	sxtb	r3, r3
 8000624:	73fb      	strb	r3, [r7, #15]
 8000626:	e029      	b.n	800067c <MCAL_GPIO_INIT+0xce>
	}
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_Analog || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_Floating )
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <MCAL_GPIO_INIT+0x8a>
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d104      	bne.n	8000642 <MCAL_GPIO_INIT+0x94>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	789b      	ldrb	r3, [r3, #2]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e01c      	b.n	800067c <MCAL_GPIO_INIT+0xce>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_AF_OD)//Consider it as input floating
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b08      	cmp	r3, #8
 8000648:	d104      	bne.n	8000654 <MCAL_GPIO_INIT+0xa6>
		{
			//Set CNFX[1:0] MODEX[1:0]
			Config = ( (PinConfig->GPIO_MODE) << 2);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e013      	b.n	800067c <MCAL_GPIO_INIT+0xce>
		}
		else //You deal with pull-up & pull-down
		{
			Config = (GPIO_MODE_INPUT_PU << 2);
 8000654:	2308      	movs	r3, #8
 8000656:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	789b      	ldrb	r3, [r3, #2]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d105      	bne.n	800066c <MCAL_GPIO_INIT+0xbe>
			{
				//Set ODR Register to make it pull-up
				GPIOX->ODR = PinConfig->GPIO_PinNumber;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	e007      	b.n	800067c <MCAL_GPIO_INIT+0xce>
			}
			else
			{
				//Set ODR Register to make it pull-down
				GPIOX->ODR &= ~(PinConfig->GPIO_PinNumber);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	683a      	ldr	r2, [r7, #0]
 8000672:	8812      	ldrh	r2, [r2, #0]
 8000674:	43d2      	mvns	r2, r2
 8000676:	401a      	ands	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	60da      	str	r2, [r3, #12]
			}
		}
	}
    *RegisterConfig |= ( (Config) << Get_Pin_Bit_Position(PinConfig->GPIO_PinNumber) );
 800067c:	7bfc      	ldrb	r4, [r7, #15]
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff2e 	bl	80004e4 <Get_Pin_Bit_Position>
 8000688:	4603      	mov	r3, r0
 800068a:	fa04 f203 	lsl.w	r2, r4, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	431a      	orrs	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bd90      	pop	{r4, r7, pc}

080006a0 <MCAL_GPIO_ReadPin>:
 * @param [in] 		-Pin number
 * @retval 			-Return (High or Low)
 * Note             -None
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_t* GPIOX, uint16_t PinNumber)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
	if( ((GPIOX->IDR & PinNumber) != LOW) )
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	887b      	ldrh	r3, [r7, #2]
 80006b2:	4013      	ands	r3, r2
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MCAL_GPIO_ReadPin+0x1c>
	{
		return HIGH;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <MCAL_GPIO_ReadPin+0x1e>
	}
	else
	{
		return LOW;
 80006bc:	2300      	movs	r3, #0
	}
}
 80006be:	4618      	mov	r0, r3
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <MCAL_GPIO_WritePin>:
 * @param [in] 		-Pin number
 * @retval 			-None
 * Note             -None
 */
void  MCAL_GPIO_WritePin(GPIO_t* GPIOX, uint16_t Pinx_Val, uint16_t PinNumber)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	460b      	mov	r3, r1
 80006d2:	807b      	strh	r3, [r7, #2]
 80006d4:	4613      	mov	r3, r2
 80006d6:	803b      	strh	r3, [r7, #0]
	if(Pinx_Val != LOW )
 80006d8:	887b      	ldrh	r3, [r7, #2]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d003      	beq.n	80006e6 <MCAL_GPIO_WritePin+0x1e>
	{
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber;
 80006de:	883a      	ldrh	r2, [r7, #0]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	611a      	str	r2, [r3, #16]
		//These bits are write-only and can be accessed in Word mode only.
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}
}
 80006e4:	e002      	b.n	80006ec <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 80006e6:	883a      	ldrh	r2, [r7, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	615a      	str	r2, [r3, #20]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
	...

080006f8 <SPI1_IRQHandler>:
 *                                                 ==========================
 */

//===============================<SPI1_IRQHandler Function>
void SPI1_IRQHandler ()
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
	struct S_SPI_IRQ SPI_IRQ;

	SPI_IRQ.RXE = ( (SPI1->SR) & 1);
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <SPI1_IRQHandler+0x40>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	b2da      	uxtb	r2, r3
 8000708:	793b      	ldrb	r3, [r7, #4]
 800070a:	f362 0300 	bfi	r3, r2, #0, #1
 800070e:	713b      	strb	r3, [r7, #4]
	SPI_IRQ.TXE = ( (SPI1->SR >> 1) & 1 );
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <SPI1_IRQHandler+0x40>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	085b      	lsrs	r3, r3, #1
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	b2da      	uxtb	r2, r3
 800071c:	793b      	ldrb	r3, [r7, #4]
 800071e:	f362 0341 	bfi	r3, r2, #1, #1
 8000722:	713b      	strb	r3, [r7, #4]

	//Todo ERR Interrupt
	G_SPI_CFG[SPI1_Index]->CallBack(SPI_IRQ);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <SPI1_IRQHandler+0x44>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	7938      	ldrb	r0, [r7, #4]
 800072c:	4798      	blx	r3

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40013000 	.word	0x40013000
 800073c:	2000006c 	.word	0x2000006c

08000740 <SPI2_IRQHandler>:

//===============================<SPI2_IRQHandler Function>
void SPI2_IRQHandler ()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
	struct S_SPI_IRQ SPI_IRQ;

	SPI_IRQ.RXE = ( (SPI2->SR) & 1);
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <SPI2_IRQHandler+0x40>)
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	793b      	ldrb	r3, [r7, #4]
 8000752:	f362 0300 	bfi	r3, r2, #0, #1
 8000756:	713b      	strb	r3, [r7, #4]
	SPI_IRQ.TXE = ( (SPI2->SR >> 1) & 1 );
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <SPI2_IRQHandler+0x40>)
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	085b      	lsrs	r3, r3, #1
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	793b      	ldrb	r3, [r7, #4]
 8000766:	f362 0341 	bfi	r3, r2, #1, #1
 800076a:	713b      	strb	r3, [r7, #4]

	//Todo ERR Interrupt
	G_SPI_CFG[SPI2_Index]->CallBack(SPI_IRQ);
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <SPI2_IRQHandler+0x44>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	695b      	ldr	r3, [r3, #20]
 8000772:	7938      	ldrb	r0, [r7, #4]
 8000774:	4798      	blx	r3

}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40003800 	.word	0x40003800
 8000784:	2000006c 	.word	0x2000006c

08000788 <USART1_IRQHandler>:
//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
//                               IRQ Handler
//=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

void USART1_IRQHandler ()
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 800078c:	4b02      	ldr	r3, [pc, #8]	; (8000798 <USART1_IRQHandler+0x10>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	691b      	ldr	r3, [r3, #16]
 8000792:	4798      	blx	r3
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000024 	.word	0x20000024

0800079c <USART2_IRQHandler>:

void USART2_IRQHandler ()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <USART2_IRQHandler+0x10>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	4798      	blx	r3
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000024 	.word	0x20000024

080007b0 <USART3_IRQHandler>:

void USART3_IRQHandler ()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	G_UART_CFG->P_IRQ_CallBack ();
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <USART3_IRQHandler+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	691b      	ldr	r3, [r3, #16]
 80007ba:	4798      	blx	r3
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000024 	.word	0x20000024

080007c4 <MCU_Init>:
#include "Stm32f103c6_Uart_Driver.h"
#include "../Autosar_Implementation/RTE_Gen/Rte_DoorLockAlgoSW.h"
#include "../Autosar_Implementation/RTE_Gen/Rte_DoorSensorAbstractionSWC.h"

void MCU_Init ()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	//================================GPIO Init================================//
	E_GPIOA_CLK_EN(); //Enable GPIOA Clock
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MCU_Init+0x44>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MCU_Init+0x44>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6193      	str	r3, [r2, #24]

	//PA3 ----> Door sensor
	GPIO_Config_t PinCfg_DoorSensor;

	PinCfg_DoorSensor.GPIO_PinNumber = GPIO_PIN_3;
 80007d6:	2308      	movs	r3, #8
 80007d8:	80bb      	strh	r3, [r7, #4]
	PinCfg_DoorSensor.GPIO_MODE = GPIO_MODE_INPUT_Floating;
 80007da:	2301      	movs	r3, #1
 80007dc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &PinCfg_DoorSensor);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	480a      	ldr	r0, [pc, #40]	; (800080c <MCU_Init+0x48>)
 80007e4:	f7ff fee3 	bl	80005ae <MCAL_GPIO_INIT>

	//PA7 ----> Led On/Off

	PinCfg_DoorSensor.GPIO_PinNumber = GPIO_PIN_7;
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	80bb      	strh	r3, [r7, #4]
	PinCfg_DoorSensor.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80007ec:	2304      	movs	r3, #4
 80007ee:	71bb      	strb	r3, [r7, #6]
	PinCfg_DoorSensor.GPIO_Output_SPEED = GPIO_OUTPUT_SPEED_10M;
 80007f0:	2301      	movs	r3, #1
 80007f2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOA, &PinCfg_DoorSensor);
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MCU_Init+0x48>)
 80007fa:	f7ff fed8 	bl	80005ae <MCAL_GPIO_INIT>

}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800

08000810 <StartOS>:


void StartOS ()
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	unsigned char i = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	71fb      	strb	r3, [r7, #7]

	while (1)
	{

		if (i == 10)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b0a      	cmp	r3, #10
 800081e:	d105      	bne.n	800082c <StartOS+0x1c>
		{
            ReadDoorSensor_Runnable();
 8000820:	f7ff fcd9 	bl	80001d6 <ReadDoorSensor_Runnable>
			i++;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	3301      	adds	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	e7f6      	b.n	800081a <StartOS+0xa>

		} else if (i == 12)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b0c      	cmp	r3, #12
 8000830:	d104      	bne.n	800083c <StartOS+0x2c>
		{
			//RTE_Event_12ms
			DoorLockAlgo_Runnable();
 8000832:	f7ff fc9d 	bl	8000170 <DoorLockAlgo_Runnable>

			i = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e7ee      	b.n	800081a <StartOS+0xa>

		} else
		{
			i++;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	3301      	adds	r3, #1
 8000840:	71fb      	strb	r3, [r7, #7]
		if (i == 10)
 8000842:	e7ea      	b.n	800081a <StartOS+0xa>

08000844 <main>:


}

int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//Init MCU
	MCU_Init ();
 8000848:	f7ff ffbc 	bl	80007c4 <MCU_Init>

	//Start OS
	StartOS();
 800084c:	f7ff ffe0 	bl	8000810 <StartOS>

	while (1);
 8000850:	e7fe      	b.n	8000850 <main+0xc>
	...

08000854 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000856:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000858:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <LoopForever+0x6>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <LoopForever+0xe>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	; (80008a0 <LoopForever+0x16>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000882:	f000 f811 	bl	80008a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff ffdd 	bl	8000844 <main>

0800088a <LoopForever>:

LoopForever:
    b LoopForever
 800088a:	e7fe      	b.n	800088a <LoopForever>
  ldr   r0, =_estack
 800088c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000898:	08000918 	.word	0x08000918
  ldr r2, =_sbss
 800089c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008a0:	20000074 	.word	0x20000074

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <__libc_init_array>:
 80008a8:	b570      	push	{r4, r5, r6, lr}
 80008aa:	2500      	movs	r5, #0
 80008ac:	4e0c      	ldr	r6, [pc, #48]	; (80008e0 <__libc_init_array+0x38>)
 80008ae:	4c0d      	ldr	r4, [pc, #52]	; (80008e4 <__libc_init_array+0x3c>)
 80008b0:	1ba4      	subs	r4, r4, r6
 80008b2:	10a4      	asrs	r4, r4, #2
 80008b4:	42a5      	cmp	r5, r4
 80008b6:	d109      	bne.n	80008cc <__libc_init_array+0x24>
 80008b8:	f000 f81a 	bl	80008f0 <_init>
 80008bc:	2500      	movs	r5, #0
 80008be:	4e0a      	ldr	r6, [pc, #40]	; (80008e8 <__libc_init_array+0x40>)
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <__libc_init_array+0x44>)
 80008c2:	1ba4      	subs	r4, r4, r6
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	42a5      	cmp	r5, r4
 80008c8:	d105      	bne.n	80008d6 <__libc_init_array+0x2e>
 80008ca:	bd70      	pop	{r4, r5, r6, pc}
 80008cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008d0:	4798      	blx	r3
 80008d2:	3501      	adds	r5, #1
 80008d4:	e7ee      	b.n	80008b4 <__libc_init_array+0xc>
 80008d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008da:	4798      	blx	r3
 80008dc:	3501      	adds	r5, #1
 80008de:	e7f2      	b.n	80008c6 <__libc_init_array+0x1e>
 80008e0:	08000910 	.word	0x08000910
 80008e4:	08000910 	.word	0x08000910
 80008e8:	08000910 	.word	0x08000910
 80008ec:	08000914 	.word	0x08000914

080008f0 <_init>:
 80008f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008f2:	bf00      	nop
 80008f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008f6:	bc08      	pop	{r3}
 80008f8:	469e      	mov	lr, r3
 80008fa:	4770      	bx	lr

080008fc <_fini>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr
